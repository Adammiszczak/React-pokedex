{"version":3,"sources":["containers/PokemonList/PokemonList.module.css","images/psyduck.png","containers/PokemonList/PokemonList.js","containers/Main/Main.js","containers/PokemonCard/PokemonCarousel/PokemonCarouselBt.js","containers/PokemonCard/PokemonCard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PokemonList","props","state","pokeList","pokeListCopy","currentPageCards","currentPage","postsPerPage","pageNumbers","totalPosts","isSorted","isLoading","handlePagination","bind","event","this","setState","Number","target","dataset","pageid","myData","slice","sort","a","b","comparison","name","currentComponent","axios","get","response","data","results","map","result","index","id","urlDetail","url","image","path","console","error","getPokemons","lastCard","firstCard","totalCards","i","Math","ceil","length","push","RenderPagination","className","aria-label","singlePage","key","data-pageid","onClick","LoadingScreen","styles","loader","spinner","handleSort","aria-hidden","pokemon","src","alt","to","type","Component","Main","Fragment","PokemonCarouselBt","Container","Carousel","indicators","prevIcon","style","Item","imageFront","imageBack","imageFrontShiny","imageBackShiny","PokemonCard","pokemonDetail","pokemonName","currentPokemon","weight","height","base_experience","stats","sprites","front_default","back_default","front_shiny","back_shiny","getPokemonSingle","scope","stat","Navigation","Navbar","fixed","collapseOnSelect","expand","bg","variant","Toggle","aria-controls","Collapse","Nav","Home","Row","Col","Jumbotron","require","Button","size","About","App","basename","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.bf4d8988.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"PokemonList_loader__3mfMe\",\"FadeAnimation\":\"PokemonList_FadeAnimation__21EKh\",\"spinner\":\"PokemonList_spinner__Pf8Df\",\"spin\":\"PokemonList_spin__1Jr6a\"};","module.exports = __webpack_public_path__ + \"static/media/psyduck.ac89d4f9.png\";","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport axios from 'axios';\r\nimport styles from \"./PokemonList.module.css\";\r\n\r\nexport class PokemonList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            pokeList: [],\r\n            pokeListCopy: [],\r\n            currentPageCards: [],\r\n            currentPage: 1,\r\n            postsPerPage: 24,\r\n            pageNumbers: 1,\r\n            totalPosts: 100,\r\n            isSorted: false,\r\n            isLoading: true\r\n        };\r\n        this.handlePagination = this.handlePagination.bind(this);\r\n    }\r\n\r\n// Setting page on pagination\r\n\r\n    handlePagination(event) {\r\n\r\n        this.setState({\r\n            currentPage: Number(event.target.dataset.pageid)\r\n        });\r\n    }\r\n\r\n// Sorting listing alphabetically\r\n\r\n    handleSort() {\r\n\r\n        const myData = this.state.pokeListCopy.slice();\r\n        const isSorted = this.state.isSorted;\r\n        myData.sort(function (a, b) {\r\n            let comparison = 0;\r\n            if (a.name < b.name) { comparison = -1; }\r\n            if (a.name > b.name) { comparison = 1; }\r\n            if (!isSorted) {\r\n                return comparison;\r\n            } else if (isSorted) {\r\n                return comparison * -1;\r\n            }\r\n        });\r\n\r\n        this.setState({ pokeListCopy: myData, isSorted: !isSorted})\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    // Current State Cache\r\n\r\n        let currentComponent = this;\r\n\r\n    // Fetching data about pokemons and save is as a state\r\n\r\n        async function getPokemons() {\r\n            try {\r\n                const response = await axios.get(`https://pokeapi.co/api/v2/pokemon/?limit=${currentComponent.state.totalPosts}`);\r\n                const pokeList = response\r\n                    .data\r\n                    .results\r\n                    .map((result, index) => ({\r\n                        name: result.name,\r\n                        id: index + 1,\r\n                        urlDetail: result.url,\r\n                        image: `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${index + 1}.png`,\r\n                        path: `/pokemon/${result.name}`\r\n                    }));\r\n\r\n                currentComponent.setState({ pokeList, pokeListCopy: pokeList, isLoading: false})\r\n\r\n\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        }\r\n        getPokemons()\r\n    }\r\n\r\n    render() {\r\n\r\n    // Pagination logic\r\n\r\n        const lastCard = this.state.currentPage * this.state.postsPerPage;\r\n        const firstCard = lastCard - this.state.postsPerPage;\r\n        const totalCards = this.state.pokeListCopy;\r\n        const currentPageCards = totalCards.slice(firstCard, lastCard);\r\n        this.state.currentPageCards = currentPageCards;\r\n        const pageNumbers = [];\r\n\r\n        for (let i = 1; i <= Math.ceil(totalCards.length / this.state.postsPerPage); i++) {\r\n            pageNumbers.push(i);\r\n        }\r\n\r\n    // Pagination interactive component\r\n\r\n        const RenderPagination = () => (\r\n     \r\n        <div className=\"row justify-content-end mx-4\">\r\n            <nav aria-label=\"Page navigation example\">\r\n                <ul className=\"pagination\">\r\n                    {\r\n                    pageNumbers.map(singlePage =>\r\n                        <li key={`page${singlePage}`} className={this.state.currentPage === singlePage ? `page-item active` : `page-item`}><div data-pageid={singlePage} onClick={this.handlePagination} className=\"page-link\">{singlePage}</div></li>\r\n                    )}\r\n                </ul>\r\n            </nav>\r\n        </div>\r\n        );\r\n\r\n\r\n        const LoadingScreen = () => (\r\n            <div className={styles.loader}>\r\n                <div className={styles.spinner}></div>\r\n            </div>\r\n        )                \r\n\r\n        return (\r\n            <section className=\"py-5 my-5\">\r\n                <div className=\"container\">\r\n                    <h1 className=\"text-white\">\r\n                        Pokemon lists - Page Number {this.state.currentPage}\r\n                    </h1>\r\n                    <LoadingScreen />\r\n                    <div className=\"container my-5\">\r\n                        <div className=\"row justify-content-end my-3 mx-2\">\r\n                            <div className=\"col-md-6 col-lg-4\">\r\n                                <button onClick={() => this.handleSort()} className=\"btn btn-light btn-block\">\r\n                                    <i className={`fa ${!this.state.isSorted ? \"fa-arrow-up\" : \"fa-arrow-down\"}`} aria-hidden=\"true\"></i>  {!this.state.isSorted ? \"Sort A-Z\" : \"Sort Z-A\"}</button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row mx-2\">\r\n\r\n                            {\r\n                            this.state.currentPageCards.map((pokemon, index) =>\r\n                                <div key={index} className=\"col-xl-3 col-lg-4 col-md-6 col-sm-6 col-12 mb-4\">\r\n                                    <div className=\"rounded shadow-sm\"><img\r\n                                        src={pokemon.image}\r\n                                        alt={`Pokemon ${pokemon.name}`}\r\n                                        className=\"bg-secondary img-fluid card-img-top\" />\r\n                                        <div className=\"bg-light py-3\">\r\n                                            <h5 className=\"text-dark\">\r\n                                                {pokemon.name}\r\n                                            </h5>\r\n                                        <Link key={pokemon.path} to={`/pokemon/${pokemon.name}`}>\r\n                                            <button type=\"button\" className=\"btn btn-danger btn-sm text-decoration-none font-weight-bold\">Read more about {pokemon.name}</button>\r\n                                        </Link>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    <RenderPagination />\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PokemonList\r\n","import React, { Component } from 'react'\r\nimport PokemonList from '../PokemonList/PokemonList';\r\n\r\nexport class Main extends Component {\r\n    render() {\r\n        return (\r\n            \r\n            <React.Fragment>\r\n                <PokemonList />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react'\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Carousel from 'react-bootstrap/Carousel';\r\nimport Container from 'react-bootstrap/Container';\r\n\r\nexport default function PokemonCarouselBt(props) {\r\n    return (\r\n\r\n        <React.Fragment>\r\n            <Container className=\"px-0 my-3\">\r\n    <Carousel indicators={false} prevIcon={<span aria-hidden=\"true\" className=\"carousel-control-prev-icon bg-dark\" />} className=\"bg-dark\" style={{ \"opacity\": \"0.90\" }} >\r\n                    <Carousel.Item>\r\n                        <img\r\n                            className=\"d-block img-fluid mx-auto\"\r\n                            src={props.imageFront}\r\n                            alt=\"First slide\"\r\n                        /></Carousel.Item>\r\n                    <Carousel.Item>\r\n                        <img\r\n                            className=\"d-block img-fluid mx-auto\"\r\n                            src={props.imageBack}\r\n                            alt=\"Third slide\"\r\n                        /></Carousel.Item>\r\n                    <Carousel.Item>\r\n                        <img\r\n                            className=\"d-block img-fluid mx-auto\"\r\n                            src={props.imageFrontShiny}\r\n                            alt=\"Third slide\"\r\n                        /></Carousel.Item>\r\n                    <Carousel.Item>\r\n                        <img\r\n                            className=\"d-block img-fluid mx-auto\"\r\n                            src={props.imageBackShiny}\r\n                            alt=\"Third slide\"\r\n                        /></Carousel.Item>\r\n                </Carousel>\r\n            </Container>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nimport PokemonCarouselBt from './PokemonCarousel/PokemonCarouselBt';\r\n\r\nexport class PokemonCard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: true,\r\n            pokemonDetail: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        // receive props and set state cache\r\n\r\n        let pokemonName = this.props['match']['params']['pokemonId'];\r\n        let currentPokemon = this;\r\n\r\n        async function getPokemonSingle() {\r\n\r\n        // fetching detailed data and save it as state\r\n\r\n            try {\r\n                const response = await axios.get(`https://pokeapi.co/api/v2/pokemon/${pokemonName}`);\r\n                const pokemonDetail = response.data;\r\n                const {\r\n                    name,\r\n                    weight,\r\n                    height,\r\n                    base_experience,\r\n                    stats,\r\n                    sprites: {\r\n                        front_default,\r\n                        back_default,\r\n                        front_shiny,\r\n                        back_shiny\r\n                    }\r\n                } = pokemonDetail;\r\n\r\n                currentPokemon.setState({\r\n                    isLoading: false,\r\n                    pokemonDetail: {\r\n                        name,\r\n                        weight,\r\n                        height,\r\n                        base_experience,\r\n                        stats,\r\n                        sprites: {\r\n                            front_default,\r\n                            back_default,\r\n                            front_shiny,\r\n                            back_shiny\r\n                        }\r\n                    }\r\n                })\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        }\r\n\r\n        getPokemonSingle()\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <section className=\"pt-5 mt-5\">\r\n                <div className=\"container\">\r\n                    {this.state.isLoading\r\n                        ? \r\n                        <div>The Content is Loading</div>\r\n                        :\r\n                        <React.Fragment>\r\n                            <h1 className=\"text-capitalize text-white mb-5\">{this.state.pokemonDetail.name} - Pokemon details</h1>\r\n                            <PokemonCarouselBt \r\n                            imageFront={this.state.pokemonDetail.sprites['front_default']}\r\n                            imageBack={this.state.pokemonDetail.sprites['back_default']}\r\n                            imageFrontShiny={this.state.pokemonDetail.sprites['front_shiny']}\r\n                            imageBackShiny={this.state.pokemonDetail.sprites['back_shiny']}\r\n                            />\r\n                            <section>\r\n                                <div className=\"card\">\r\n                                    <div className=\"card-body\">\r\n                                    <Link to=\"/pokemon\">\r\n                                        <button type=\"button\" className=\"btn btn-info text-decoration-none\"><i className=\"fas fa-arrow-left\"> Go back to list</i></button>\r\n                                    </Link>\r\n                                    </div>\r\n                                </div>\r\n                                <table className=\"table table-bordered table-hover table-light text-dark\">\r\n                                    <thead className=\"thead-light\">\r\n                                        <tr>\r\n                                            <th scope=\"col\">Property Name</th>\r\n                                            <th scope=\"col\">Value</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <th scope=\"row\">Name</th>\r\n                                            <td>{this.state.pokemonDetail.name}</td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <th scope=\"row\">Weight</th>\r\n                                            <td>{this.state.pokemonDetail.weight} hectograms</td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <th scope=\"row\">Height</th>\r\n                                            <td>{this.state.pokemonDetail.height} decimeters</td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <th scope=\"row\">Base experience for defeat</th>\r\n                                            <td>{this.state.pokemonDetail.base_experience} xp</td>\r\n                                        </tr>\r\n                                        {\r\n                                        this.state.pokemonDetail.stats.map((stat,index) => \r\n                                        <tr key={`tr-${index}`}>\r\n                                            <th className=\"text-capitalize\" scope=\"row\">{stat['stat']['name']}</th>\r\n                                            <td>{stat['base_stat']}</td>\r\n                                        </tr>\r\n                                        )}\r\n                                    </tbody>\r\n                                </table>\r\n                            </section>\r\n                        </React.Fragment>\r\n                    }\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PokemonCard\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Main from './containers/Main/Main';\r\nimport PokemonCard from './containers/PokemonCard/PokemonCard';\r\n\r\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Jumbotron from 'react-bootstrap/Jumbotron';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nconst Navigation = () => (\r\n\r\n  <React.Fragment>\r\n    <Navbar fixed=\"top\" collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n      <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n      <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n        <Nav className=\"mr-auto\">\r\n          <Link className=\"nav-link\" to=\"/\">Home page</Link>\r\n          <Link className=\"nav-link\" to=\"/pokemon\">Main List</Link>\r\n          <Link className=\"nav-link\" to=\"/about\">About project</Link>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  </React.Fragment>\r\n)\r\n\r\n\r\nconst Home = () =>\r\n  <React.Fragment>\r\n    <Container className=\"my-5\">\r\n      <Row className=\"text-white my-5\">\r\n        <Col className=\"my-5\"><h1>My Home Page</h1></Col>\r\n      </Row>\r\n      <Row className=\"my-5\">\r\n        <Col className=\"\">\r\n          <Jumbotron style={{ \"opacity\": \"0.90\" }} className=\"bg-dark text-white\">\r\n            <h3>Welcome at my PokeDex Project</h3>\r\n            <img className=\"my-3\" src={require('../src/images/psyduck.png')} alt=\"psyduck\" />\r\n            <p>\r\n              <Link to=\"/pokemon\"><Button size=\"lg\" variant=\"primary\">Launch list!</Button></Link>\r\n            </p>\r\n          </Jumbotron>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  </React.Fragment>;\r\n\r\n\r\nconst About = () =>\r\n  <React.Fragment>\r\n    <Container className=\"my-5\">\r\n      <Row className=\"text-white my-5 text-justify\">\r\n        <Col className=\"my-5 text-center\"><h1>About project</h1></Col>\r\n        <Jumbotron style={{ \"opacity\": \"0.90\" }} className=\"bg-dark text-white\">\r\n          <p>This project is another one of recruitment task for my application as Junior Front-end Developer. This time it was from one big company. The task is to create custom Pokedex (pokemon lists). The goals are:</p>\r\n          <ul>\r\n            <li>The app should have list with pagination</li>\r\n            <li>The app should have at least one sort options</li>\r\n            <li>The app should use the PokeApi v2</li>\r\n            <li>The app should be launched by \"npm start\"</li>\r\n            <li>The app should be compatible with node.js v12</li>\r\n            <li>The app should be fully responsive</li>\r\n          </ul>\r\n          <p>I met a few obstacles:</p>\r\n          <ul>\r\n            <li>The PokeApi doesn't enable endpoints to sort data at backend</li>\r\n            <li>There is need for some asynchronic functions for fetches</li>\r\n            <li>Making pagination and sorting at the some time was challenging</li>\r\n          </ul>\r\n          <p>Further plans for this app:</p>\r\n          <ul>\r\n            <li>Javascript unit tests, which I have to learn!</li>\r\n            <li>Basic backend</li>\r\n            <li>Ux improvements</li>\r\n            <li>Users login platform</li>\r\n          </ul>\r\n        </Jumbotron>\r\n      </Row>\r\n    </Container>\r\n  </React.Fragment>;\r\n\r\nfunction App() {\r\n  return (\r\n\r\n    <div className=\"App\">\r\n      <Router basename=\"/React-pokedex\">\r\n        <Navigation />\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route exact path=\"/pokemon\" component={Main} />\r\n          <Route path=\"/pokemon/:pokemonId\" component={PokemonCard} />\r\n          <Route path=\"/about\" component={About} />\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}